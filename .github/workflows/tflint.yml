name: Reusable tflint workflow

on:
  workflow_call:
    inputs:
      CODEQUALITY_REF:
        required: false
        type: string
        default: "main"
        description: "Reference of the code-quality repo to use."

jobs:
  tflint:
    name: Run tflint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - uses: terraform-linters/tflint-load-config-action@v0
        with:
          source-repo: riege/code-quality
          source-path: terraform/.tflint.hcl
          source-ref: ${{ inputs.CODEQUALITY_REF }}
          destination-path: ${{ github.workspace }}/.tflint.hcl
          token: ${{ github.token }}

      - name: Determine tflint config file location
        run: |
          echo "TFLINT_CONFIG_FILE=${{ github.workspace }}/.tflint.hcl" >> "$GITHUB_ENV"

      - uses: actions/cache@v3
        name: Cache plugin dir
        with:
          path: ~/.tflint.d/plugins
          key: tflint-${{ hashFiles(env.TFLINT_CONFIG_FILE) }}

      - uses: terraform-linters/setup-tflint@v3
        name: Setup TFLint

      - name: Init TFLint
        run: tflint --init --config="$TFLINT_CONFIG_FILE"
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Run TFLint
        run: tflint --format=checkstyle --recursive --config="$TFLINT_CONFIG_FILE" > tflint-report.xml

      - name: Report Result
        uses: jwgmeligmeyling/checkstyle-github-action@master
        if: success() || failure()
        with:
          title: TFLINT Report
          name: tflint Report
          path: tflint-report.xml
